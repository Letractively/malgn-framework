#summary [자바기초] 용어정리

==클래스(Class)==
(www.terms.co.kr 참고)
객체지향 프로그래밍(OOP)에서 클래스는 특정 종류의 객체내에 있는 변수와 메쏘드를 정의하는 일종의 틀, 즉 템플릿이다. 따라서, 객체는 클래스로 규정된 인스턴스로서, 변수 대신 실제값을 가진다.

클래스는 OOP를 정의하는 개념 중 하나인데, 클래스에 대한 중요한 몇가지의 개념들은 다음과 같다.

 * 클래스는 전부 혹은 일부를 그 클래스 특성으로부터 상속받는 서브클래스를 가질 수 있으며, 클래스는 각 서브클래스에 대해 수퍼클래스가 된다.
 * 서브클래스는 자신만의 메쏘드와 변수를 정의할 수도 있다.
 * 클래스와 그 서브클래스 간의 구조를 "클래스 계층(hierarchy)"이라 한다.

==프로퍼티(Property)==
(www.terms.co.kr 참고)
프로퍼티란 대개 어떤 객체의 특성을 가리킨다. 대부분의 프로그래밍 언어에서, 프로퍼티라는 용어는 데이터 구조와 관련된 특성들을 설명하기 위해 사용된다.

==메쏘드(Method)==
객체지향 프로그래밍(OOP)에서 메쏘드는 클래스의 일부분으로 정의되어, 그 클래스의 모든 객체에 포함되어야 하는 프로그램된 절차다. 클래스(즉 객체)는 하나 이상의 메쏘드를 가질 수 있다. 객체의 메쏘드는 그 객체에게 알려진 자료에만 접근이 가능하므로, 응용프로그램의 객체 집합체 내에서 데이터의 무결성을 확실하게 한다. 메쏘드는 여러 개의 객체들에서 재사용될 수 있다.

==객체(Object)==
객체지향 프로그래밍에서 객체는, 프로그램 설계 단계에서 최초로 생각해야 할 것으로서, 결국 프로세스에서 유도된 코드 단위들이다. 중간에, 각 객체는 일반화된 객체 클래스로 만들어지고 더욱 일반화된 클래스가 정의됨으로써, 객체가 모델을 공유하고 그 코드에서 클래스 정의를 재사용할 수 있게 한다.

각각의 객체는 특정 클래스 또는 그 클래스의 자체 메쏘드나 프로시저 그리고 데이터 변수를 가지고 있는 서브클래스가 실제로 구현된 것, 즉 인스턴스이다. 그러므로 객체는 실제로 컴퓨터 내에서 수행되는 것을 말한다.

==인스턴스(Instance)==
인스턴스는 추상화 개념 또는 클래스 객체, 컴퓨터 프로세스 등과 같은 템플릿이 실제 구현된 것이다. 인스턴스화는 클래스 내의 객체에 대해 특정한 변형을 정의하고, 이름을 붙인 다음, 그것을 물리적인 어떤 장소에 위치시키는 등의 작업을 통해, 인스턴스를 만드는 것을 의미한다.

몇몇 필자들은, 객체지향 프로그래밍에서 클래스를 인스턴스화 한다는 것이, 클래스의 구체적인 인스턴스, 즉 객체를 만드는 것이라고 말한다. 그 객체는 컴퓨터 내에서 실행시킬 수 있는 실행 파일이다.
객체지향 프로그램 언어인 자바에서는, 클래스로부터 인스턴스화된 객체를, 객체라는 말 대신에 역시 클래스라고 부름으로써 많은 사용자들을 혼란스럽게 한다. 즉 자바에서는, 특정한 클래스를 만들기 위해 클래스를 인스턴스화하며, 그것 역시 컴퓨터 내에서 동작하는 실행 파일이다.